// Generated by CoffeeScript 1.3.3
(function() {
  var connect, createTestFile, exec, exposedServerRequire, fs, http, https, loadFile, path, phantom, request, serverRequire, serverTypes, testPlugin, testPlugin1, testPlugin2, tieRequestToTest, window;

  serverRequire = require('mundle');

  phantom = require('phantom');

  http = require('http');

  https = require('https');

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  loadFile = require('mocks').loadFile;

  exposedServerRequire = loadFile("" + __dirname + "/node_modules/mundle/lib//exposed/server.js");

  connect = require('connect');

  request = require('superagent');

  serverTypes = {
    HTTPServer: function(callback) {
      return serverRequire.listen(3000, callback);
    },
    externalHTTPServer: function(callback) {
      var server;
      server = (http.createServer()).listen(3002, callback);
      return serverRequire.listen(server);
    },
    connectServer: function(callback) {
      var app;
      app = connect();
      return (app.use(serverRequire.connect())).listen(3004, callback);
    }
  };

  createTestFile = function(filePath, text) {
    var makePath;
    makePath = function(dirPath) {
      var parent;
      if (!fs.existsSync((parent = path.dirname(dirPath)))) {
        makePath(parent);
      }
      if (!fs.existsSync(dirPath)) {
        return fs.mkdirSync(dirPath);
      }
    };
    makePath(path.dirname(filePath));
    return fs.writeFileSync(filePath, text);
  };

  exports.testListen = {
    clientServed: function(test) {
      var serversTested;
      serversTested = 0;
      test.expect((Object.keys(serverTypes)).length);
      return phantom.create(function(ph) {
        var serverInit, serverType, _fn;
        _fn = function(serverType) {
          var server;
          return server = serverInit(function() {
            var address, port, _ref;
            _ref = server.address(), address = _ref.address, port = _ref.port;
            return ph.createPage(function(page) {
              page.set('onError', function(msg, trace) {
                console.log(msg);
                return trace.forEach(function(item) {
                  return console.log("	 " + item.file + ":" + item.line);
                });
              });
              return page.includeJs("http://" + address + ":" + port + "/mundlejs/require.js", function() {
                return page.evaluate(function() {
                  return window.require != null;
                }, function(exists) {
                  test.ok(exists, 'require function is available');
                  if (++serversTested === (Object.keys(serverTypes)).length) {
                    test.done();
                  }
                  server.close();
                  return ph.exit();
                });
              });
            });
          });
        };
        for (serverType in serverTypes) {
          serverInit = serverTypes[serverType];
          _fn(serverType);
        }
        console.warn("Test fails because phantomjs doesn't have function.prototype.bind");
        return console.warn("http://code.google.com/p/phantomjs/issues/detail?id=522");
      });
    }
  };

  exports.testConnect = function(test) {
    var app;
    test.expect(3);
    return app = connect().use(serverRequire.connect()).use(function(req, res) {
      test.ok('One test gets through past the mundle middleware');
      res.writeHead(200, {
        'Content-Type': 'text/javascript'
      });
      return res.end('Mundle didn\'t touch it');
    }).listen(3005, function() {
      var relTestPath;
      relTestPath = path.relative(process.cwd(), "" + __dirname + "/foo/bar/testConnectFile.js");
      createTestFile(relTestPath, 'Hello, testConnect!!');
      return request.get('http://0.0.0.0:3005/mundlejs/b/tmp/mundleTest/foo/bar/testConnectFile.js', function(res) {
        var results;
        results = (JSON.parse(res.text)).results;
        test.deepEqual(results, {
          '/b/tmp/mundleTest/foo/bar/testConnectFile.js': 'Hello, testConnect!!'
        }, 'Connect respond with the mundle');
        return request.get('http://0.0.0.0:3005/tmp/mundleTest/foo/bar/testConnectFile.js', function(res) {
          test.deepEqual(res.text, 'Mundle didn\'t touch it', 'Connect bypass mundle middleware');
          return test.done();
        });
      });
    });
  };

  exports.testSetBasePath = {
    relativePath: function(test) {
      var relTestPath;
      relTestPath = path.relative(process.cwd(), "" + __dirname + "/foo/bar/testFile.js");
      createTestFile(relTestPath, 'Hello, mundlejs!!');
      test.expect(2);
      serverRequire.setBasePath(path.dirname(relTestPath));
      return serverRequire('/b/testFile.js', {}, function(errors, results) {
        test.ifError(errors);
        test.deepEqual(results, {
          '/b/testFile.js': 'Hello, mundlejs!!'
        });
        return test.done();
      });
    },
    absolutePath: function(test) {
      var absTestPath;
      absTestPath = "" + __dirname + "/foo1/bar1/testFile.js";
      createTestFile(absTestPath, 'Hello, mundlejs!!');
      test.expect(2);
      serverRequire.setBasePath(path.dirname(absTestPath));
      return serverRequire('/b/testFile.js', {}, function(errors, results) {
        test.ifError(errors);
        test.deepEqual(results, {
          '/b/testFile.js': 'Hello, mundlejs!!'
        }, errors);
        return test.done();
      });
    }
  };

  exports.testErrorFormatting = {
    setUp: function(callback) {
      serverRequire.setBasePath(__dirname);
      return callback();
    },
    noErrors: function(test) {
      test.expect(1);
      createTestFile("" + __dirname + "/test2.js", "");
      return serverRequire('/b/test2.js', {}, function(errors, results) {
        test.ifError(errors);
        return test.done();
      });
    },
    fileNotFoundError: function(test) {
      test.expect(2);
      return serverRequire('/b/doesnt/exist.js', {}, function(errors, results) {
        test.equal(errors['/b/doesnt/exist.js'].message, 'Unable to read file', 'Check error message');
        test.equal(errors['/b/doesnt/exist.js'].path, '/b/doesnt/exist.js', 'Check error path');
        return test.done();
      });
    },
    nestedFileNotFoundError: function(test) {
      test.expect(2);
      createTestFile("" + __dirname + "/test1.js", "require('/doesnt/exist.js')");
      return serverRequire('/b/test1.js', {}, function(errors, results) {
        test.equal(errors['/b/doesnt/exist.js'].message, 'Unable to read file');
        test.equal(errors['/b/doesnt/exist.js'].path, '/doesnt/exist.js');
        return test.done();
      });
    },
    unprocessedByClient: function(test) {
      test.expect(2);
      return serverRequire('../something/Hidden.js', {}, function(errors, results) {
        test.equal(errors['../something/Hidden.js'].message, 'Incorrectly formed request. Missing request type (/b or /m)');
        test.equal(errors['../something/Hidden.js'].path, '../something/Hidden.js');
        return test.done();
      });
    },
    accessAboveRoot: function(test) {
      test.expect(2);
      return serverRequire('/b/../something/Hidden.js', {}, function(errors, results) {
        test.equal(errors['/b/../something/Hidden.js'].message, 'Attempt to access a file in an unauthorized location');
        test.equal(errors['/b/../something/Hidden.js'].path, '/b/../something/Hidden.js');
        return test.done();
      });
    },
    nestedAccessAboveRoot: function(test) {
      test.expect(2);
      createTestFile("" + __dirname + "/testNestedAccessAboveRoot.js", "require('../something/Hidden1.js')");
      return serverRequire('/b/testNestedAccessAboveRoot.js', {}, function(errors, results) {
        test.equal(errors['/b/something/Hidden1.js'].message, 'Unable to read file');
        test.equal(errors['/b/something/Hidden1.js'].path, '../something/Hidden1.js');
        return test.done();
      });
    }
  };

  exports.testCache = {
    setUp: function(callback) {
      exposedServerRequire.module.exports.setBasePath(__dirname);
      return callback();
    },
    dependencies: function(test) {
      test.expect(4);
      createTestFile("" + __dirname + "/testCache1.js", "require('./testCache2.js')");
      createTestFile("" + __dirname + "/testCache2.js", "require('./testCache3.js')");
      createTestFile("" + __dirname + "/testCache3.js", "");
      return exposedServerRequire.module.exports("/b/testCache1.js", {}, function(errors, results) {
        var _ref, _ref1;
        test.deepEqual((_ref = exposedServerRequire.indexCache) != null ? _ref["/b/testCache1.js"] : void 0, [
          {
            value: './testCache2.js',
            raw: '\'./testCache2.js\'',
            point: 9,
            line: 1,
            column: 9
          }
        ], "dependencies should have been added to the cache");
        test.deepEqual((_ref1 = exposedServerRequire.indexCache) != null ? _ref1["/b/testCache2.js"] : void 0, [
          {
            value: './testCache3.js',
            raw: '\'./testCache3.js\'',
            point: 9,
            line: 1,
            column: 9
          }
        ], "dependencies should have been added to the cache");
        exposedServerRequire.fileCache["/b/testCache2.js"] = "require('./testCache4.js')";
        return exposedServerRequire.module.exports('/b/testCache1.js', {}, function(errors, results) {
          test.ok(results['/b/testCache3.js'] != null, 'dependencies should have been loaded based on the cache, not the modified file');
          return exposedServerRequire.module.exports('/b/testCache1.js', {
            '/b/testCache3.js': true
          }, function(errors, results) {
            test.deepEqual(results, {
              '/b/testCache1.js': "require('./testCache2.js')",
              '/b/testCache2.js': "require('./testCache4.js')"
            }, 'The bundles already on the client should be taken into account when building a bundle from the cached dependencies');
            return test.done();
          });
        });
      });
    },
    files: function(test) {
      test.expect(3);
      createTestFile("" + __dirname + "/testCacheFiles1.js", "require('./testCacheFiles2.js')");
      createTestFile("" + __dirname + "/testCacheFiles2.js", "require('./testCacheFiles3.js')");
      createTestFile("" + __dirname + "/testCacheFiles3.js", "");
      return exposedServerRequire.module.exports("/b/testCacheFiles1.js", {}, function(errors, results) {
        var _ref, _ref1;
        test.deepEqual((_ref = exposedServerRequire.fileCache) != null ? _ref["/b/testCacheFiles1.js"] : void 0, "require('./testCacheFiles2.js')", "contents of testCacheFiles1 should have been added to the cache");
        test.deepEqual((_ref1 = exposedServerRequire.fileCache) != null ? _ref1["/b/testCacheFiles2.js"] : void 0, "require('./testCacheFiles3.js')", "contents of testCacheFiles2 should have been added to the cache");
        createTestFile("" + __dirname + "/testCacheFiles2.js", "require('./testCacheFiles3.js'); 'asdasdfasdf'");
        return exposedServerRequire.module.exports('/b/testCacheFiles1.js', {}, function(errors, results) {
          test.deepEqual(results, {
            '/b/testCacheFiles1.js': "require('./testCacheFiles2.js')",
            '/b/testCacheFiles2.js': "require('./testCacheFiles3.js')",
            '/b/testCacheFiles3.js': ""
          }, 'file should have been loaded from the cache, not the modified file');
          return test.done();
        });
      });
    }
  };

  testPlugin = {
    extensions: ['testPlugin0', 'testPlugin01'],
    compiler: function(text) {
      return 'The testPlugin compiler worked!';
    }
  };

  testPlugin1 = {
    extensions: ['testPlugin1', 'testPlugin11'],
    compiler: function(text) {
      return 'The testPlugin1 compiler worked!';
    }
  };

  testPlugin2 = {
    extensions: ['testPlugin2', 'testPlugin21'],
    compiler: function(text) {
      return 'The testPlugin2 compiler worked!';
    }
  };

  exports.testPlugin = {
    singlePlugin: function(test) {
      test.expect(4);
      createTestFile("" + __dirname + "/testPlugin.testPlugin0", "blabkabjakjblaklajbljabl");
      createTestFile("" + __dirname + "/testPlugin.testPlugin01", "blabkabjakjblaklajbljabl");
      serverRequire.use(testPlugin);
      return serverRequire('/b/testPlugin.testPlugin0', {}, function(errors, modules) {
        test.ifError(errors, 'No errors should be returned');
        test.deepEqual(modules, {
          '/b/testPlugin.testPlugin0': 'The testPlugin compiler worked!'
        }, 'Compiler should have returned compiled code from plugin 0');
        return serverRequire('/b/testPlugin.testPlugin01', {}, function(errors, modules) {
          test.ifError(errors, 'No errors should be returned');
          test.deepEqual(modules, {
            '/b/testPlugin.testPlugin01': 'The testPlugin compiler worked!'
          }, 'Compiler should have returned compiled code from plugin 1');
          return test.done();
        });
      });
    },
    multiplePlugin: function(test) {
      test.expect(8);
      createTestFile("" + __dirname + "/testPlugin.testPlugin1", "blabkabjakjblaklajbljabl");
      createTestFile("" + __dirname + "/testPlugin.testPlugin11", "blabkabjakjblaklajbljabl");
      serverRequire.use([testPlugin1, testPlugin2]);
      return serverRequire('/b/testPlugin.testPlugin1', {}, function(errors, modules) {
        test.ifError(errors, 'No errors should be returned');
        test.deepEqual(modules, {
          '/b/testPlugin.testPlugin1': 'The testPlugin1 compiler worked!'
        }, 'Compiler should have returned compiled code from plugin 0 using first compiler');
        return serverRequire('/b/testPlugin.testPlugin11', {}, function(errors, modules) {
          test.ifError(errors, 'No errors should be returned');
          test.deepEqual(modules, {
            '/b/testPlugin.testPlugin11': 'The testPlugin1 compiler worked!'
          }, 'Compiler should have returned compiled code from plugin 1 using first compiler');
          createTestFile("" + __dirname + "/testPlugin.testPlugin2", "blabkabjakjblaklajbljabl");
          createTestFile("" + __dirname + "/testPlugin.testPlugin21", "blabkabjakjblaklajbljabl");
          return serverRequire('/b/testPlugin.testPlugin2', {}, function(errors, modules) {
            test.ifError(errors, 'No errors should be returned');
            test.deepEqual(modules, {
              '/b/testPlugin.testPlugin2': 'The testPlugin2 compiler worked!'
            }, 'Compiler should have returned compiled code from plugin 0 using second compiler');
            return serverRequire('/b/testPlugin.testPlugin21', {}, function(errors, modules) {
              test.ifError(errors, 'No errors should be returned');
              test.deepEqual(modules, {
                '/b/testPlugin.testPlugin21': 'The testPlugin2 compiler worked!'
              }, 'Compiler should have returned compiled code from plugin 1 using second compiler');
              return test.done();
            });
          });
        });
      });
    }
  };

  global.window = window = {
    location: {
      hostname: 'test',
      port: '1111'
    }
  };

  tieRequestToTest = function(callback) {
    return window.XMLHttpRequest = global.XMLHttpRequest = function() {
      var requestInstance;
      return requestInstance = {
        open: function(verb, request) {
          return setTimeout(function() {
            return callback(request, requestInstance);
          }, 0);
        },
        send: function() {}
      };
    };
  };

  require('mundle/lib/client.js');

  exports.testResolvePath = {
    relative: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/b/foo.js?=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('./bar/../foo.js');
    },
    absolute: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/b/bar/foo.js?=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('/bar/foo.js');
    },
    subFileRelative: function(test) {
      test.expect(2);
      tieRequestToTest(function(request, requestFn) {
        test.equal(request, 'http://test:1111/mundlejs/b/bar/foo1.js?=1', 'proper request should be formed');
        requestFn.response = JSON.stringify({
          err: null,
          results: {
            '/b/bar/foo1.js': "module.exports = window.testSubFileRelative = function(path) {\n  return require(path);\n};"
          }
        });
        return requestFn.onload();
      });
      return window.require('/bar/foo1.js', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/b/bar/foo2.js?/b/bar/foo1.js=1', 'proper request should be formed');
          return test.done();
        });
        return window.testSubFileRelative('./foo2.js');
      });
    },
    subFileAbsolute: function(test) {
      test.expect(1);
      tieRequestToTest(function(request, requestFn) {
        test.equal(request, 'http://test:1111/mundlejs/b/bar/foo1.js?=1', 'request should not fire because cached');
        requestFn.response = '{}';
        return requestFn.onload();
      });
      return window.require('/bar/foo1.js', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/b/foo2.js?/b/bar/foo1.js=1', 'proper request should be formed');
          return test.done();
        });
        return window.testSubFileRelative('/foo2.js');
      });
    },
    mundle: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo/0.0.0?/b/bar/foo1.js=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('foo');
    },
    mundleWithVersion: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo/1.1.1?/b/bar/foo1.js=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('foo@1.1.1');
    },
    mundlePreviouslyLoadedWithVersion: function(test) {
      test.expect(2);
      tieRequestToTest(function(request, requestFn) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo1/1.1.2?/b/bar/foo1.js=1', 'proper request should be formed');
        requestFn.response = JSON.stringify({
          err: null,
          results: {
            '/m/foo1/1.1.2': "module.exports = 'foo1@1.1.2 contents'"
          }
        });
        return requestFn.onload();
      });
      return window.require('foo1@1.1.2', function() {
        return window.require('foo1', function(err, result) {
          test.equal(result, 'foo1@1.1.2 contents', 'previously loaded version should be returned');
          return test.done();
        });
      });
    },
    mundlePreviouslyLoadedDifferentVersion: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo1/1.1.3?/b/bar/foo1.js=1&/m/foo1/1.1.2=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('foo1@1.1.3');
    },
    mundlePreviouslyLoaded: function(test) {
      test.expect(2);
      tieRequestToTest(function(request, requestFn) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo2/0.0.0?/b/bar/foo1.js=1&/m/foo1/1.1.2=1', 'proper request should be formed');
        requestFn.response = JSON.stringify({
          err: null,
          results: {
            '/m/foo2/1.1.4': "module.exports = 'foo2@1.1.4 contents'"
          }
        });
        return requestFn.onload();
      });
      return window.require('foo2', function() {
        return window.require('foo2@1.1.4', function(err, result) {
          test.equal(result, 'foo2@1.1.4 contents');
          return test.done();
        });
      });
    },
    mundleWithRel: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo/0.0.0/bar.js?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('foo/bar.js');
    },
    mundleWithVersionAndRel: function(test) {
      test.expect(1);
      tieRequestToTest(function(request) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo/1.1.1/bar.js?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1', 'proper request should be formed');
        return test.done();
      });
      return window.require('foo@1.1.1/bar.js');
    },
    mundlePreviouslyLoadedWithRel: function(test) {
      test.expect(2);
      tieRequestToTest(function(request, requestFn) {
        test.equal(request, 'http://test:1111/mundlejs/m/foo3/0.0.0?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1', 'proper request should be formed');
        requestFn.response = JSON.stringify({
          err: null,
          results: {
            '/m/foo3/1.1.1': "window.testSubFile = function(path) {\n  return require(path);\n};"
          }
        });
        return requestFn.onload();
      });
      return window.require('foo3', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/m/foo3/1.1.1/bar.js?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1&/m/foo3/1.1.1=1', 'proper request should be formed');
          return test.done();
        });
        return window.require('foo3/bar.js');
      });
    },
    subMundleRelative: function(test) {
      test.expect(1);
      return window.require('foo3', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/m/foo3/1.1.1/baz.js?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1&/m/foo3/1.1.1=1', 'proper request should be formed');
          return test.done();
        });
        return window.testSubFile('./baz.js');
      });
    },
    subMundleAbsolute: function(test) {
      test.expect(1);
      return window.require('foo3', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/b/baz.js?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1&/m/foo3/1.1.1=1', 'proper request should be formed');
          return test.done();
        });
        return window.testSubFile('/baz.js');
      });
    },
    subMundleMundle: function(test) {
      test.expect(1);
      return window.require('foo3', function() {
        tieRequestToTest(function(request) {
          test.equal(request, 'http://test:1111/mundlejs/m/baz/0.0.0?/b/bar/foo1.js=1&/m/foo1/1.1.2=1&/m/foo2/1.1.4=1&/m/foo3/1.1.1=1', 'proper request should be formed');
          return test.done();
        });
        return window.testSubFile('baz');
      });
    }
  };

}).call(this);
