{"name":"Mundlejs","tagline":"Client-side module bundler, cacher, loader","body":"## Why mundlejs?\r\nLots of javascript loading up-front (concatenated) = long wait-time for initial page load.  \r\nLoading all javascript asynchronously, as needed= too many requests resulting in poor performance and poor user experience.  \r\nManually optimizing concatenated scripts for deployment= a pain, and an un-resolvable problem for dynamic sites.\r\n\r\nSymptom of all these problems: client-side code which is not truly modular and reusable, the way our server-side code is.\r\n\r\n## What does it look like?\r\n* For a step in the workflow where the user would expect a \"loading\" delay for the dependency:\r\n  `require('./someModule.js',myCallbackFunc);`\r\n\r\n* For dependencies that you want to be available immediately:\r\n  `someModuleExports = require('./someModule.js');`\r\n\r\nYour code does what it says- no processing before deployment to make it mean something different, and no fake synchronicity that gets covered up by a build step. Synchronous require in your client-side code means that module will be available immediately, asynchronous means you can arrange to keep the client busy while waiting for the module to load.\r\n\r\n\r\n## How does it work?\r\nThe secret is that loading client-side modules is not a client only problem, a server-side component should exist and work hand-in-hand with the client. What the server-side does is parse synchronous dependencies (the second form in the \"what?\" section) and package them all together so they will be available immediately.\r\n\r\n## Benefits:\r\n* Client-side code can be as modular as you like, without affecting real-life performance.\r\n* Really fast- caching of bundles is included, so it's faster than express even at serving single files\r\n* Very intuitive- when your code means what it says, everyone benefits\r\n* Build coffeescript, jade, etc. for the client on-the-fly, with cacheing.\r\n\r\n### Major byproduct benefit of this solution-\r\nWe can have real client-side module managements, Ã  la npm for the client. Imagine this:  \r\n     `mundle install jQuery@1.7.6`  \r\nand in your client-side code:  \r\n     `$ = require('jQuery');`  \r\nAnd you're done!\r\n\r\nVery easy with this solution and going to be implemented next. (I'm itching to do this right away.... but it's 0010 Monday morning... hmm....)\r\n\r\n## Where to go next?\r\nCheck out [the product page](https://github.com/meelash/Mundlejs) to learn more, see demos, see what's coming soon (in the issues) and what's missing, contribute, and feedback.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}