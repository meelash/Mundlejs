// Generated by CoffeeScript 1.3.3
(function() {
  var Mundle, addPackageCache, basePath, fileCache, findRequires, fs, getPackageCache, indexCache, path, pkgCache, resolvePath, sanitizePath, serverRequire, url;

  fs = require('fs');

  path = require('path');

  url = require('url');

  findRequires = require('find-requires');

  pkgCache = {};

  indexCache = {};

  fileCache = {};

  basePath = '/';

  Mundle = (function() {

    function Mundle(loadedModules) {
      this.loaded = loadedModules;
      this.queue = 0;
    }

    Mundle.prototype.require = function(path, callback) {
      var errors, results;
      results = {};
      errors = null;
      return this.readAndParseFile(path, basePath, function(err, path, contents) {
        var safePath;
        if ((safePath = sanitizePath(path)).length === 0) {
          safePath = path;
        }
        results[safePath] = contents;
        if (err) {
          (errors || (errors = {}))[safePath] = err;
          err.path = safePath;
        }
        if (this.queue === 0) {
          return callback(errors, results);
        }
      });
    };

    Mundle.prototype.readAndParseFile = function(path, parent, callback) {
      var code, contents, errno, error, syscall, _name;
      try {
        path = resolvePath(path, parent);
      } catch (err) {
        return callback.call(this, err, path, '');
      }
      if (this.loaded[sanitizePath(path)]) {
        return;
      }
      this.queue++;
      try {
        contents = fileCache[_name = sanitizePath(path)] || (fileCache[_name] = fs.readFileSync(path, 'utf8'));
        this.loaded[sanitizePath(path)] = true;
        this.findAndLoadSyncRequires(path, contents, callback);
        this.queue--;
        return callback.call(this, null, path, contents);
      } catch (err) {
        this.queue--;
        errno = err.errno, code = err.code, syscall = err.syscall;
        console.error(err);
        error = {
          message: 'No such file or directory',
          errno: errno,
          code: code,
          syscall: syscall
        };
        return callback.call(this, error, path, '');
      }
    };

    Mundle.prototype.findAndLoadSyncRequires = function(filePath, contents, callback) {
      var dependencies, dependency, syncRequire, _i, _len, _name, _results;
      dependencies = indexCache[_name = sanitizePath(filePath)] || (indexCache[_name] = findRequires(contents, {
        raw: true
      }));
      _results = [];
      for (_i = 0, _len = dependencies.length; _i < _len; _i++) {
        dependency = dependencies[_i];
        if ((syncRequire = dependency.value) != null) {
          _results.push(this.readAndParseFile(syncRequire, path.dirname(filePath), callback));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Mundle;

  })();

  resolvePath = function(relPath, parent) {
    var absPath;
    if (/^(.|..)\//.test(relPath)) {
      if (parent) {
        absPath = path.join(parent, relPath);
      } else {
        absPath = path.join(basePath, relPath);
      }
    } else {
      absPath = path.join(basePath, relPath);
      if (!/^\//.test(relPath)) {
        absPath += '.js';
      }
    }
    if ((sanitizePath(absPath)).length === 0) {
      throw {
        message: 'Attempt to access file above client-root',
        path: relPath
      };
    } else {
      return absPath;
    }
  };

  sanitizePath = function(path) {
    var re, sanitizedPath;
    sanitizedPath = '';
    re = new RegExp("(^" + basePath + "\/*)(.*)");
    path.replace(re, function(str, p1, p2) {
      return sanitizedPath = "/" + p2;
    });
    return sanitizedPath;
  };

  getPackageCache = function(filePath, clientCacheDiff) {
    var index;
    filePath = resolvePath(filePath, basePath);
    index = filePath + (Object.keys(clientCacheDiff)).sort();
    return pkgCache[index] || index;
  };

  addPackageCache = function(index, data) {
    var cache;
    pkgCache[index] = cache = new Buffer(JSON.stringify(data));
    return cache;
  };

  serverRequire = function(path, loadedModules, callback) {
    var mundle;
    mundle = new Mundle(loadedModules);
    return mundle.require(path, callback);
  };

  serverRequire.setBasePath = function(relPath) {
    return basePath = path.resolve(relPath);
  };

  serverRequire.setBasePath('./');

  serverRequire.listen = function(server, options, callback) {
    var port;
    if ('function' === typeof options) {
      callback = options;
      options = {};
    }
    if ('undefined' === typeof server) {
      server = 80;
    }
    if ('number' === typeof server) {
      port = server;
      if (options && options.key) {
        server = require('https').createServer(options);
      } else {
        server = require('http').createServer();
      }
      server.on('request', function(req, res) {
        if ((req.url.search(/^\/mundlejs\//)) === -1) {
          res.writeHead(200);
          return res.end('Welcome to Mundlejs!');
        }
      });
      server.listen(port, callback);
    }
    server.on('request', function(req, res) {
      var cache, cacheIndex, clientCacheDiff, clientJs, filePath, parsedUrl;
      if (req.url === '/mundlejs/require.js') {
        clientJs = fs.readFileSync("" + __dirname + "/client.js");
        res.writeHead(200, {
          'Content-Type': 'text/javascript'
        });
        return res.end(clientJs);
      } else if ((req.url.search(/^\/mundlejs\//)) !== -1) {
        parsedUrl = url.parse(req.url.slice(9), true);
        filePath = '/' + parsedUrl.pathname.slice(1);
        clientCacheDiff = parsedUrl.query;
        if ((cache = getPackageCache(filePath, clientCacheDiff)) instanceof Buffer) {
          res.writeHead(200, {
            'Content-Type': 'text/javascript',
            'Content-Length': cache.length
          });
          return res.end(cache);
        } else {
          cacheIndex = cache;
          return serverRequire(filePath, clientCacheDiff, function(err, results) {
            cache = addPackageCache(cacheIndex, {
              err: err,
              results: results
            });
            res.writeHead(200, {
              'Content-Type': 'text/javascript',
              'Content-Length': cache.length
            });
            return res.end(cache);
          });
        }
      }
    });
    return server;
  };

  module.exports = serverRequire;

}).call(this);
